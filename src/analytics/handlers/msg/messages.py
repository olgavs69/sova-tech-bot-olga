import logging

from aiogram.types import Message, InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode

from .msg_util import clear_report_state_data, set_input_state, make_kb, make_kb_report_menu, back_current_step_btn, add_messages_to_delete
from ..types.msg_data import MsgData
from .headers import make_header
from ...api import get_reports
from ...constant.variants import all_departments, all_branches, all_types, all_periods, all_menu_buttons
from ..text.recommendations import recommendations
from ..text.revenue_texts import revenue_analysis_text
from ..text.texts import text_functions
from ..types.text_data import TextData

from src.mailing.commands.registration.notifications.sub_mail import SubscriptionState

async def check_state_data(state: FSMContext):
    data = await state.get_data()
    logging.info(f"State data: {data}")


# msg functions
async def department_msg(msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {state_data}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º

    if state_data.get("report:step") == 0:
        await clear_report_state_data(msg_data.state)

    await set_input_state(msg_data.state, "report:department")

    departments = await all_departments(msg_data.tgid)

    header = await make_header(msg_data) + "\n\n"
    text = header + "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
    kb = make_kb(departments)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await check_state_data(msg_data.state)



async def branch_msg(msg_data: MsgData) -> None:
    await set_input_state(msg_data.state, "report:branch")

    departments = await all_departments(msg_data.tgid)
    department_id = (await msg_data.state.get_data()).get("report:department")
    logging.info(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {department_id}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

    header = await make_header(msg_data) + "\n\n"
    text = header + "–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –æ—Ç—á—ë—Ç–∞"
    kb = make_kb(all_branches)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await check_state_data(msg_data.state)


async def type_msg(msg_data: MsgData, type_indexes: list[int]) -> None:
    await set_input_state(msg_data.state, "report:type")

    header = await make_header(msg_data) + "\n\n"
    text = header + "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞"
    kb = make_kb(all_types, type_indexes)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º report_type –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if type_indexes and type_indexes[0] in all_types:
        selected_type = all_types[type_indexes[0]]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        await msg_data.state.update_data(report_type=selected_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –∫–ª—é—á–æ–º report_type
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg_data.tgid} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {selected_type}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    else:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞: {type_indexes}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await msg_data.msg.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
    await msg_data.state.set_state(SubscriptionState.choosing_period)
    await msg_data.msg.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")



async def period_msg(msg_data: MsgData, period_indexes: list[int]) -> None:
    await set_input_state(msg_data.state, "report:period")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞

    header = await make_header(msg_data) + "\n\n"
    text = header + "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ç—á—ë—Ç–∞:"
    kb = make_kb(all_periods, period_indexes)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await check_state_data(msg_data.state)


async def menu_msg(msg_data: MsgData, buttons_indexes: list[int]) -> None:
    header = await make_header(msg_data) + "\n\n"
    text = header + "–í—ã–±–µ—Ä–∏—Ç–µ"

    kb = make_kb_report_menu(all_menu_buttons, buttons_indexes)

    await msg_data.msg.edit_text(text=text, reply_markup=kb)


async def test_msg(msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    logging.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_data}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    departments = await all_departments(msg_data.tgid)
    department_id = state_data.get("report:department")

    _department = departments.get(department_id)
    _type = state_data.get("report:type")
    _period = state_data.get("report:period")

    await msg_data.msg.edit_text(text=f"{_department=}\n\n{_type=}\n\n{_period=}")
    
      
# menu messages
async def parameters_msg(msg_data: MsgData, type_prefix: str = "", only_negative: bool = False, recommendations: bool = False) -> None:
    state_data = await msg_data.state.get_data()

    report_type = state_data.get("report:type")

    period = state_data.get("report:period")

    loading_msg = await msg_data.msg.edit_text(text="–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥")

    reports = await get_reports(
        tgid=msg_data.tgid,
        state_data=state_data,
        type_prefix=type_prefix
    )

    back_kb = IKM(inline_keyboard=[[back_current_step_btn]])

    if None in reports:
        await loading_msg.edit_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç", reply_markup=back_kb)
        return

    header = await make_header(msg_data)

    text_func = text_functions[type_prefix + report_type]
    text_data = TextData(reports=reports, period=period, only_negative=only_negative)
    texts: list[str] = text_func(text_data)

    if report_type == "revenue" and recommendations:
        texts = revenue_analysis_text(text_data, msg_type="revenue_recomendations")
    
    if len(texts) == 1 and ("**" not in texts[0]): # checks if parse mode is markdown (needs rewrite)
        texts[0] = header + "\n\n" + texts[0]
    else:
        header_msg = await msg_data.msg.answer(text=header)
        await add_messages_to_delete(msg_data=msg_data, messages=[header_msg])

    for text in texts:
        if "**" in text: # checks parse mode (needs rewrite)
            parse_mode = ParseMode.MARKDOWN
        else:
            parse_mode = ParseMode.HTML
        text_msg = await msg_data.msg.answer(text=text, parse_mode=parse_mode)
        await add_messages_to_delete(msg_data=msg_data, messages=[text_msg])
    
    await msg_data.msg.answer(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?", reply_markup=back_kb)
    
    await loading_msg.delete()


async def recommendations_msg(msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    
    report_type = state_data.get("report:type")
        
    if report_type == "revenue":
        await parameters_msg(msg_data, type_prefix="analysis.", only_negative=True, recommendations=True)
        return

    back_kb = IKM(inline_keyboard=[[back_current_step_btn]])
    
    text = "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üí°</b>\n" + recommendations.get(report_type)
    
    if text is None:
        await msg_data.msg.edit_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", reply_markup=back_kb)
        return
    
    await msg_data.msg.edit_text(text=text, reply_markup=back_kb)
    
    